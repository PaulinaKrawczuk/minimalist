package com.example.home_inventory

import com.example.home_inventory.model.Action
import com.example.home_inventory.repository.ActionRepository
import com.example.home_inventory.service.ActionServiceImpl
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.ArgumentMatchers.any
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.Mockito.*
import org.mockito.junit.jupiter.MockitoExtension
import org.springframework.test.context.ActiveProfiles

@ExtendWith(MockitoExtension::class)
@ActiveProfiles("test")
class ActionsTest {

	@Mock
	lateinit var actionRepository: ActionRepository

	@InjectMocks
	lateinit var actionService: ActionServiceImpl

	@Test
	fun `should return list of actions`() {
		// Arrange
		val actionList = listOf(
				Action(1L, "ActionType1"),
				Action(2L, "ActionType2")
		)
		`when`(actionRepository.findAll()).thenReturn(actionList)  // Upewnij się, że lista nie jest pusta

		// Act
		val result = actionService.getAllActions()

		// Assert
		assertEquals(2, result.size)  // Sprawdzamy czy lista ma dwa elementy
		assertEquals("ActionType1", result[0].actionType)
	}

	@Test
	fun `should create a new action and return its autogenerated id`() {
		// Arrange
		val actionToSave = Action(null, "ActionType1")  // Obiekt, który zapisujemy, ma id = null
		val savedAction = Action(1L, "ActionType1")     // Symulujemy obiekt, który Hibernate zwróci po zapisaniu, z wygenerowanym ID
		`when`(actionRepository.save(any(Action::class.java))).thenReturn(savedAction)

		// Act
		val resultId = actionService.createAction(actionToSave)

		// Assert
		assertEquals(1L, resultId)
	}
	@Test
	fun `should create a new action and return its id c`() {
		// Arrange
		// Arrange
		val actionToSave = Action(null, "ActionType1")
		val savedAction = Action(1L, "ActionType1")

		`when`(actionRepository.save(any(Action::class.java))).thenReturn(savedAction)
		`when`(actionRepository.findByActionType("ActionType1")).thenReturn(null)

		val resultId = actionService.createAction(actionToSave)

		`when`(actionRepository.findByActionType("ActionType1")).thenReturn(savedAction)

		val exception = assertThrows<IllegalArgumentException> {
			actionService.createAction(actionToSave)
		}

		// Assert
		assertEquals(1L, resultId)  // Pierwszy zapis się powiódł
		assertEquals("Action with this type already exists", exception.message)  // Drugi zapis rzuca wyjątek
	}

}
